# This configuration lets you deploy the DynaDo backend on AWS Lambda
# using the serverless framework (https://www.serverless.com/framework/docs/).
#
# To retrieve all needed credentials, please follow the AWS wizard
# in 'Deploy Dynatrace'.

service: aws-lambda-todolist-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

#
# required to enable serverless async variable resolution
#
variablesResolutionMode: '20210326'

# Disable all deprecation messages
disabledDeprecations:
  - '*'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  timeout: 30
  memorySize: 512
  logRetentionInDays: 3

  environment:
    DEBUG: dynado
    DT_LOGGING_DESTINATION: stderr
    DT_LOGGING_NODEJS_FLAGS: Exporter=true,LambdaSensor=true,Propagator=true

  apiGateway:
    shouldStartNameWithService: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          -
            - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/to-do-list-item'

plugins:
  - serverless-plugin-scripts

resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}

functions:
  createTodo:
    name: createTodoListItem
    handler: handler.createItem
    layers: ${self:custom.OneAgentLayer}
    environment: ${self:custom.OneAgentConfig}
    reservedConcurrency: 5
    events:
      - http:
          method: post
          path: todolist
          cors: ${self:custom.cors}

  updateTodo:
    name: updateTodoListItem
    handler: handler.updateItem
    layers: ${self:custom.OneAgentLayer}
    environment: ${self:custom.OneAgentConfig}
    reservedConcurrency: 5
    events:
      - http:
          method: put
          path: todolist/{id}
          cors: ${self:custom.cors}

  deleteTodo:
    name: deleteTodoListItem
    handler: handler.deleteItem
    layers: ${self:custom.OneAgentLayer}
    environment: ${self:custom.OneAgentConfig}
    reservedConcurrency: 5
    events:
      - http:
          method: delete
          path: todolist/{id}
          cors: ${self:custom.cors}

  getTodo:
    name: getTodoListItem
    handler: handler.getItem
    layers: ${self:custom.OneAgentLayer}
    environment: ${self:custom.OneAgentConfig}
    reservedConcurrency: 5
    events:
      - http:
          method: get
          path: todolist/{id}
          cors: ${self:custom.cors}

  getTodos:
    name: getTodoListItems
    handler: handler.getItems
    layers: ${self:custom.OneAgentLayer}
    environment: ${self:custom.OneAgentConfig}
    events:
      - http:
          method: get
          path: todolist
          cors: ${self:custom.cors}

custom:
  dynamodb:
    stages:
      - dev

  # API Gateway CORS settings
  cors:
    origin: '*'
    allowCredentials: true
    headers:
      - Content-Type
      - x-dtc

  OneAgentLayer: arn:aws:lambda:us-east-1:725887861453:layer:Dynatrace_OneAgent_1_217_1_20210423-040722_nodejs:1
  #OneAgentLayer: ${file(./queryOneAgentLayerARNs.js):nodejs}

  OneAgentConfig:
    AWS_LAMBDA_EXEC_WRAPPER: /opt/dynatrace
    DT_TENANT: bgm14430
    DT_CLUSTER_ID: 2041330775
    DT_CONNECTION_BASE_URL: https://bgm14430.dev.dynatracelabs.com
    DT_CONNECTION_AUTH_TOKEN: xxxxxx.xxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
